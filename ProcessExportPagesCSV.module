<?php namespace ProcessWire;

/**
 * ProcessExportPagesCSV
 * Module to be implemented by other Process to provide CSV export
 *
 *
 * @author kixe (Christoph Thelen) note@qualyweb.com 2022-02-10
 * @copyright © 2022 Christoph Thelen
 * @license Licensed under GNU/GPL v3
 * @link http://qualyweb.com
 * 
 * made for ProcessWire 3.x by Ryan Cramer 
 * http://processwire.com
 *
 * @version 1.0.8 - 2025-02-05
 *
 * changelog
 * @since 1.0.0 - init - 2022-02-10
 * @since 1.0.1 - fixed_bugs: wrong type as 1st argument in function method_exists(); user language sensitive option keys in data row - 2022-05-03
 * @since 1.0.2 - ignore runtime fields like FieldtypeMarkup - 2022-05-03
 * @since 1.0.3 - fixed bug: fallback to default language if option titles not set in user language - 2022-05-03
 * @since 1.0.4 - made some functions public / hookable - 2023-03-14
 * @since 1.0.5 - added export options - 2023-06-28
 * @since 1.0.6 - made export of user fields optional - 2024-04-18
 * @since 1.0.7 - made further filtering for export optional - 2024-04-19
 * @since 1.0.8 - added option to export URLs to assets (Pagefile, Pagefiles, Images ... ) - 2025-02-05
 * 
 * @todo add ASM Select to filter and order columns for export including user fields
 *
 */

class ProcessExportPagesCSV extends Process {

	/**
	 * @var InputfieldForm
	 * 
	 */
	protected $form;

	/**
	 * @var PHP Array of Column headers and assigned page properties or page field names
	 * 
	 */
	public $exportColumns = array();

	/**
	 * @var PHP Array of selectable fields in Selector field for data export
	 * 
	 */
	public $exportSelectorFields = array();

	/**
	 * @var inner separator if a single page field value is of type multiple 
	 * 
	 */
	public $export_multi_separator = "\n";

	/**
	 * @var bool if value is instance of SelectableOptionsArray create a column for each option 
	 * 
	 */
	public $export_options_per_column = false;

	/**
	 * @var use option labels instead of option values (if set) or option ids if value instance of SelectableOption option 
	 * 
	 */
	public $export_options_labels = true;

	/**
	 * @var use "yes" or "no" instead of 0 and 1 in case of checkboxes or SelectableOptionsArray per column
	 * 
	 */
	public $export_binary_text = false;

	/**
	 * @var init / default selector for export selector field 
	 * 
	 */
	public $export_selector_init = '';

	/**
	 * @var allow to export user fields, should be disabled if created / modified user is guest
	 * 
	 */
	public $allow_export_user_fields = true;

	/**
	 * @var allow further filtering for export, disable via hook in ProcessExportPagesCSV::buildExportForm()
	 * 
	 */
	public $allow_export_filter = true;

	/**
	 * @var placeholder in empty (elipsis)
	 * 
	 */
	public $placeholder_empty = '…';

	/**
	 * @var placeholder if NULL text 'NULL'
	 * 
	 */
	public $placeholder_null = 'NULL';

	/**
	 * @return array
	 * 
	 */
	public static function getModuleInfo() {
		return array(
			'title' => __('Export Pages Data CSV', __FILE__),          
			'summary' => __('Module to be implemented by other Processes to provide CSV export.', __FILE__), 
			'version' => 108, 
			'permission' => 'export-csv',
			'autoload' => 'template=admin',
			'icon' => 'download',
			'permissions' => array('export-csv' => 'Allow Data Export via CSV Download'),
		);
	}

	/**
	 * 
	 * @return string
	 * 
	 */
	public function ___render() {
		$input = $this->wire('input');
		$exportForm = $this->buildExportForm();
		$exportForm->setTrackChanges();
		if ($input->post('submit_export_csv')) {
			$exportForm = $this->processInputExport($exportForm);
		}
		return $exportForm->render();
	}	

	/**
	 * Build the form fields for exports
	 * 
	 * @return InputfieldForm
	 * @throws WireException
	 *
	 */
	protected function ___buildExportForm() {

		$form = $this->modules->get('InputfieldForm');
		if (wire('input')->queryString) $form->action = "./?" . wire('input')->queryString;
		$initValue = trim($this->export_selector_init,"\x00..\x20,");

		$form->attr('id', 'ProcessExportPagesCSV'); 
		// $form->addClass('InputfieldFormFocusFirst');
		$form->attr('method', 'post');

		$f = $this->modules->get('InputfieldMarkup');
		$text =  "<h2><i class='fa fa-download'></i>&nbsp;" . $this->_('Export Pages Data')  . "</h2>";
		$text .= "<p>" . $this->_('Click the button to download a CSV file of pages data according to selector.')."<br/>";
		$text .= $this->_('The following basic selector is used for filtering:')."<br/>";
		$text .= "<span class=\"uk-text-muted small\">$initValue</span>";

		$f->set('markupText', $text);
		$form->append($f);

		if ($this->allow_export_filter) {
			$f = $this->modules->get('InputfieldSelector');
			$f->attr('id+name', 'expo'); 
			$f->label = $this->_('Further filtering');
			$f->set('addLabel', $this->_('Add Filter'));
			$f->initValue = $initValue;

			$previewColumns = [];
			foreach ($this->exportColumns as $exportColumn) {
				$parts = explode('.', $exportColumn);
				if (strpos(end($parts), '{') !== false || strpos(end($parts), '[') !== false) {
					array_pop($parts);
					$previewColumns[] = implode('.', $parts);
				}
				else $previewColumns[] = $exportColumn;
			}
			$f->previewColumns = $previewColumns;

			$exclude = array();
			if (!empty($this->exportSelectorFields)) {
				foreach (wire('fields') as $field) {
					if (in_array($field->name, $this->exportSelectorFields)) continue;
					$exclude[] = $field->name;
				}
			}
			
			// $f->limitFields = array();
			// we use exclude instead
			//  $f->exclude = $exclude;

			$f->showFieldLabels = 1; // 0: show names (default), 1: show labels, 2: show both (label [name])
			$f->allowSubselectors = true;
			$f->allowSubfields = true;
			$f->optgroupsOrder = 'system,field,subfield,modifier';

			$form->append($f);
		}

		$f = $this->modules->get('InputfieldCheckbox');
		$f->attr('id+name', 'exportOptionsPerColumn');
		$f->label = $this->_('Export selectable options as one per column if multiple selectable.');
		$f->attr('checked', $this->export_options_per_column);
		$f->columnWidth = 33;
		$form->append($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->attr('id+name', 'exportOptionsLabels');
		$f->label = $this->_('Export option labels instead of option values (if set) or option ids (default).');
		$f->attr('checked', $this->export_options_labels);
		$f->columnWidth = 33;
		$form->append($f);

		$f = $this->modules->get('InputfieldCheckbox');
		$f->attr('id+name', 'exportBinaryText');
		$f->label = $this->_("Export text 'yes'/'no' instead of '0' / '1' in case of binary values (e.g. Checkboxes)");
		$f->attr('checked', $this->export_binary_text);
		$f->columnWidth = 33;
		$form->append($f);

		// TODO add ASM Select to filter and order columns for export including user fields

		// select created user fields (if populated) to be added to the export
		if ($this->allow_export_user_fields) {
			$f = $this->modules->get('InputfieldCheckboxes');
			$f->attr('id+name', 'userFields');
			$f->label = $this->_('Created user fields to be added to each page data set');
			$f->optionColumns = 3;
			// $f->optionWidth = 1;
			$lang = wire('user')->language->isDefault()? '' : wire('user')->language->id;
			$userFields = wire('templates')->get('user')->fields->sort("label$lang, label, name");
			foreach($userFields as $option) {
				if (strpos($option->type->name, 'FieldtypeFieldset') === 0) continue;
				if ($option->type->name == 'FieldtypePassword') continue;
				if (in_array($f->name, ['page_icon'])) continue;
				$option = $option->getContext('user');
				$f->addOption($option->id, $option->get("label$lang|label|name"));
			}
			$form->append($f);
		}

		$f = $this->modules->get('InputfieldSubmit');
		$f->attr('name', 'submit_export_csv'); 
		$f->attr('icon', $this->_("download")); 
		$f->attr('value', $this->_('Download CSV File')); 
		$form->append($f);

		return $form;
	}

	protected function ___processInputExport(InputfieldForm $form) {
		$input = $this->input->post;
		$lang = wire('user')->language->isDefault()? '' : wire('user')->language->id;
		$form->processInput($input);

		$this->export_options_per_column = $form->exportOptionsPerColumn->value? true : false;
		$this->export_options_labels = $form->exportOptionsLabels->value? true : false;
		$this->export_binary_text = $form->exportBinaryText->value? true : false;

		$selector = '';
		if ($form->expo) $selector = trim(implode(', ',array($form->expo->initValue, $form->expo->value)), ', ');
		if (!$selector) $selector = trim($this->export_selector_init,"\x00..\x20,");
		if ($selector) {
			$exportColumns = [];
			if ($form->userFields && !empty($form->userFields->attr('value'))) {
				foreach ($form->userFields->attr('value') as $userField) {
					$f = wire('fields')->get($userField);
					$key = 'label|name';
					if (!wire('user')->language->isDefault()) $key = 'label' . wire('user')->language->id . '|label|name';
					$exportColumns[$f->get($key)] = 'createdUser.' . $f->name;
				}
			}
			$exportColumns = array_merge($this->exportColumns, $exportColumns);
			$data = $this->createDataArray($selector, $exportColumns);
			$this->export($data); // no further processing
		}		
		return $form;
	}

	public function createDataArray($selector, $exportColumns) {
		$data = array();
		$pages = $this->wire('pages')->find($selector);
		foreach ($pages as $page) {
			$data[] = $this->createDataRow($page, $exportColumns);
		}
		return $data;
	}

	/**
	 * create array of column headers as keys and page-properties or page-field-values as value
	 * one – language sensitive labeled – column per each option if FieldtypeOptions is used
	 *
	 * @param object $page
	 * @param array $values
	 * @return  array 
	 *
	 */	
	protected function createDataRow(Page $page, $values = array('ID' => 'id', 'NAME' => 'name')) {
		$row = array();
		foreach ($values as $label => $fieldname) {
			$field = wire('fields')->get($fieldname);
			if ($field && $field->type == 'FieldtypeMarkup') continue;
			if ($field && $field->type == 'FieldtypeCheckbox') {
				$fieldValue = $page->$fieldname;
				if ($fieldValue && $this->export_binary_text) $fieldValue = $this->_('yes');
				else if ($this->export_binary_text) $fieldValue = $this->_('no');
				$row[$label] = $fieldValue;
			} else if ($this->export_options_per_column && $field && $field->type == 'FieldtypeOptions') {
				$inputfieldClass = $field->get('inputfieldClass');
				if (in_array($inputfieldClass, ['InputfieldRadios','InputfieldSelect']) == false) {
					foreach($field->type->manager->getOptions($field) as $option) {
						$row[$label . ' – ' . $option->getTitle()] = $this->export_binary_text? $this->_('no') : 0; // title user language sensitive		
					}
				} else {
					$row[$label] = $this->getPageValue($page, $fieldname);
					continue;
				}
			} else {
				$row[$label] = $this->getPageValue($page, $fieldname);
				continue;
			}
			$language = wire('user')->language;
			$languageID = $language->isDefault()? '' : "$language->id";

			if ($this->export_options_per_column && $page->$fieldname instanceof SelectableOptionArray && in_array($field->get('inputfieldClass'), ['InputfieldRadios','InputfieldSelect']) == false) {
				foreach ($page->$fieldname as $val) {
					$title = $val["title$languageID"];
					if (empty($title)) $title = $val['title']; // fallback to default
					$row["$label – $title"] = $this->export_binary_text? $this->_('yes') : 1; // title user language sensitive
				}
			}
		}
	    return $row;		
	}

	/**
	 * get a page property or unformatted field value
	 *
	 * @param object $page
	 * @param string $name property or fieldname, use dot syntax for subfields/ properties
	 * @param array $names INTERNAL USE ONLY
	 * @param bool $returnArray
	 * @return  string|array
	 * @todo optimize values for csv export @see ProcessPageLister::buildListerTableCol()
	 * @todo allow OR groups '|'
	 *
	 */	
	protected function ___getPageValue(Page $page, $name = null, $names = array(), $returnArray = false) {
		// quick exit
		if (!$name && empty($names)) return '';
		$values = array();
		$page->of(false);
		// subfield or subproperty
		$name = (string) $name;
		if(strpos($name, '.')) $names = explode('.', $name);
		else if (strlen($name)) $names = array($name);
		$name = null;
		if (count($names)) {
			$prop = array_shift($names);
			$res = $page->get($prop);

			if ($res instanceof Pagefiles) {
				$row = [];
				foreach ($res as $f) $row[] = $f->get('httpUrl');
				$values[] = implode(", ", $row);
			}

			if ($res instanceof Pagefile) {
				$values[] = $res->get('httpUrl');
			}

			if ($res instanceof SelectableOptionArray) {
				$row = [];
				foreach ($res as $selectedOption) $row[] = $this->export_options_labels? $selectedOption->getTitle() : $selectedOption->get('value|id');
				$values[] = implode(", ", $row);
			}

			else if ($res instanceof SelectableOption) {
				$values[] = $this->export_options_labels? $res->getTitle() : $res->get('value|id');
			}

			else if ($res instanceof TableRows) {
				$cols = $res->getColumns();
				if (is_array($cols)) {
					$rows = [];
					foreach ($res as $tableRow) {
						$row = [];
						foreach ($cols as $col) $row[] = "$col[label]: " . $tableRow->{"$col[name]"};
						$rows[] = implode("; ",$row);
					}
					$values[] = implode("\n",$rows);
				}
			}

			else if ((is_array($res) && !empty($res)) || ($res instanceof WireArray && $res->count())) {
				$nextprop = reset($names);
				if (count($names) == 1 && $nextprop == 'count') {
					if (is_array($res)) return (string) count($res);
					else return (string) $res->count();
				}
				if ($nextprop == 'first') {
					array_shift($names);
					$res = is_array($res)? array_slice($res, 0, 1) : $res->slice(0, 1);
				}
				else if ($nextprop == 'last') {
					array_shift($names);
					$res = is_array($res)? array_slice($res, -1, 1) : $res->slice(-1, 1);
				}
				foreach ($res as $item) {
					if ($item instanceof Page) {
						if (empty($names)) $values[] = $item->getFormatted('title|name');
						else if (count($names) == 1 && strpos($nextprop,'{') !== false && strpos($nextprop, '}')) {
							$values[] = $item->getMarkup($nextprop);
						}
						else if (count($names) == 1 && strpos($nextprop,'[') !== false && strpos($nextprop, ']')) {
							$prop = wirePopulateStringTags($nextprop, $page, ['tagOpen' => '[', 'tagClose' => ']']);
							$values[] = $item->$prop;
						}
						else $values = array_merge($values, $this->getPageValue($item, null, $names, true));
						continue;
					}
					if (is_object($item) && count($names) == 1 && method_exists($item, 'get')) {
						$values[] = $item->get($names[0]);
						continue;
					}
					if (is_string($item) || is_numeric($item) || (is_object($item) && method_exists("$item", '__toString'))) $values[] = "$item";
				}
			}

			else if ($res instanceof Page) {
				$values[] = $this->getPageValue($res, null, $names);
			}

			else if ($obj = is_object($res) || is_string($res) || is_numeric($res)) {

				$res = $page->getFormatted($prop);
				if (!$res && $obj && method_exists("$res", '__toString')) {
					$res = $page->get($prop);
				}
				$values[] = "$res";
			}

			else $values[] = '';
		}
		foreach ($values as &$value) {
			if ($value === null) $value = $this->placeholder_null;
			if ($value === '') $value = $this->placeholder_empty;
			if (strpos($value, '&') !== false) $value = html_entity_decode($value, ENT_QUOTES | ENT_HTML401 | ENT_XML1 | ENT_XHTML | ENT_HTML5, 'UTF-8');
			if (strpos($value, '<') !== false) $value = strip_tags($value);
		}
		// $values = array_unique(array_filter($values,'strlen'));
		if ($returnArray) return $values;
		if (empty($values)) return '';
		return implode(stripcslashes($this->export_multi_separator), $values);
	}

	// export data array as CSV
	public function export($data, $filename = 'file', $options = array()) {
		$defaultOptions = array(
			'delimiter' => ',',
			'enclosure' => '"',
			'escape_char' => "\\"
		);
		$options = array_merge($defaultOptions, $options);
		if (empty($data)) die('missing data');
		// set header
		header("Content-type: text/csv");
		header("Content-Disposition: attachment; filename=$filename.csv");
		header("Pragma: no-cache");
		header("Expires: 0");
		$output = fopen("php://output", "wb");
		// write column labels
		fputcsv($output, array_keys(reset($data)), $options['delimiter'], $options['enclosure'], $options['escape_char']);
		// write data
		foreach ($data as $fields) fputcsv($output, $fields, $options['delimiter'], $options['enclosure'], $options['escape_char']);
		fclose($output);
		exit;
	}
}

